<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>咸鱼老弟</title>
  <subtitle>【博客园-咸鱼老弟】</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xianyulaodi.github.io/"/>
  <updated>2017-07-09T03:51:59.493Z</updated>
  <id>https://xianyulaodi.github.io/</id>
  
  <author>
    <name>咸鱼老弟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript高阶函数</title>
    <link href="https://xianyulaodi.github.io/2017/07/03/javascript%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>https://xianyulaodi.github.io/2017/07/03/javascript高阶函数/</id>
    <published>2017-07-03T02:38:00.000Z</published>
    <updated>2017-07-09T03:51:59.493Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;最近在看js设计模式相关的书籍，发觉很多模式都有用到高阶函数这个东东，发觉自己之前没有总结过这类文章，所以来个小小的总结。总结的篇幅有点少，纯属做做笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://xianyulaodi.github.io/tags/js/"/>
    
      <category term="高阶函数" scheme="https://xianyulaodi.github.io/tags/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>手写一个router</title>
    <link href="https://xianyulaodi.github.io/2017/06/18/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AArouter/"/>
    <id>https://xianyulaodi.github.io/2017/06/18/手写一个router/</id>
    <published>2017-06-18T15:05:00.000Z</published>
    <updated>2017-06-25T02:46:22.905Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;   最近在玩vue,之前玩的react等，都有涉及到router的概念，router的入门不难，本着好奇的心态，想自己用js写一个router，纯属娱乐，应该不可用于实际项目&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://xianyulaodi.github.io/tags/js/"/>
    
      <category term="router" scheme="https://xianyulaodi.github.io/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式学习</title>
    <link href="https://xianyulaodi.github.io/2017/05/30/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    <id>https://xianyulaodi.github.io/2017/05/30/正则表达式学习/</id>
    <published>2017-05-30T01:04:00.000Z</published>
    <updated>2017-06-12T14:13:39.439Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;正则表达式之前学习的时候，因为很久没怎么用，或者用的时候直接找网上现成的，所以都基本忘的差不多了。所以这篇文章即是笔记，也让自己再重新学习一遍正则表达式。&lt;br&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;其实平时在操作一些字符串的时候，用正则的机会还是挺多的，之前没怎么重视正则，这是一个错误。写完这篇文章后，发觉工作中很多地方都可以用到正则，而且用起来其实还是挺爽的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="正则" scheme="https://xianyulaodi.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>老生常谈，css实现左侧固定右侧自适应</title>
    <link href="https://xianyulaodi.github.io/2017/05/25/%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88css%E5%AE%9E%E7%8E%B0%E5%B7%A6%E4%BE%A7%E5%9B%BA%E5%AE%9A%EF%BC%8C%E5%8F%B3%E4%BE%A7%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>https://xianyulaodi.github.io/2017/05/25/老生常谈css实现左侧固定，右侧自适应/</id>
    <published>2017-05-25T02:20:00.000Z</published>
    <updated>2017-05-25T15:42:24.747Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;这是一个在项目中经常使用的一个功能，而且实现方式也比较多，所以我们今天来总结以下几种实现方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://xianyulaodi.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>nodejs之path模块</title>
    <link href="https://xianyulaodi.github.io/2017/05/07/nodejs%E4%B9%8Bpath%E6%A8%A1%E5%9D%97/"/>
    <id>https://xianyulaodi.github.io/2017/05/07/nodejs之path模块/</id>
    <published>2017-05-07T10:50:00.000Z</published>
    <updated>2017-05-09T15:25:04.135Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;path 模块是 node 用于整理、转换、合并路径的神器，只要是路径问题，都可以交给它处理。但它仅仅是处理路径字符串，而不会去坚持或处理文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="node" scheme="https://xianyulaodi.github.io/tags/node/"/>
    
      <category term="path" scheme="https://xianyulaodi.github.io/tags/path/"/>
    
  </entry>
  
  <entry>
    <title>mongoose的一些操作命令</title>
    <link href="https://xianyulaodi.github.io/2017/05/06/mongoose%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>https://xianyulaodi.github.io/2017/05/06/mongoose的一些操作命令/</id>
    <published>2017-05-06T03:50:00.000Z</published>
    <updated>2017-05-07T10:14:17.057Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;最近在用express+mongoose写一个网站，因为经常要用到mongoose的一些操作命令，经常去查还挺麻烦的，所以总结一篇mongoose的使用以及一些操作命令。mongoose里面有三个概念，schemal、model、entity。先来对其三者做个小小的总结概括。&lt;br&gt;&lt;code&gt;Schema&lt;/code&gt; ： 一种以文件形式存储的数据库模型骨架，不具备数据库的操作能力&lt;br&gt;&lt;code&gt;Model&lt;/code&gt; ： 由Schema发布生成的模型，具有抽象属性和行为的数据库操作对&lt;br&gt;&lt;code&gt;Entity&lt;/code&gt; ： 由Model创建的实体，他的操作也会影响数据库&lt;br&gt;
    
    </summary>
    
    
      <category term="mongoose" scheme="https://xianyulaodi.github.io/tags/mongoose/"/>
    
      <category term="node" scheme="https://xianyulaodi.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>node核心模块--fs</title>
    <link href="https://xianyulaodi.github.io/2017/04/18/node%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97--fs/"/>
    <id>https://xianyulaodi.github.io/2017/04/18/node核心模块--fs/</id>
    <published>2017-04-18T15:17:00.000Z</published>
    <updated>2017-04-18T15:27:29.006Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件系统fs-简介&quot;&gt;&lt;a href=&quot;#文件系统fs-简介&quot; class=&quot;headerlink&quot; title=&quot;文件系统fs-简介&quot;&gt;&lt;/a&gt;文件系统fs-简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;fs模块是文件操作的封装，它提供了文件读取、写入、更名、删除、遍历目录、链接等POSIX文件系统操作。与其它模块不同的是，fs模块中所有的操作都提供了&lt;code&gt;异步&lt;/code&gt;和&lt;code&gt;同步&lt;/code&gt;的两个版本。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="node" scheme="https://xianyulaodi.github.io/tags/node/"/>
    
      <category term="fs" scheme="https://xianyulaodi.github.io/tags/fs/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭建自己的博客</title>
    <link href="https://xianyulaodi.github.io/2017/04/08/hexo+github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://xianyulaodi.github.io/2017/04/08/hexo+github搭建自己的博客/</id>
    <published>2017-04-08T07:08:32.000Z</published>
    <updated>2017-04-09T15:52:57.146Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前很早就想用hexo弄一个自己独立的博客了，在博客园也写了很多的博客,不过不喜欢博客园的风格。不过今天，终于折腾成功了，用hexo搭建了一个在github写的博客，开心，后面会将自己以前的博客慢慢迁移过来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://xianyulaodi.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://xianyulaodi.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令总结</title>
    <link href="https://xianyulaodi.github.io/2017/03/31/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>https://xianyulaodi.github.io/2017/03/31/git常用命令总结/</id>
    <published>2017-03-31T07:50:00.000Z</published>
    <updated>2017-05-06T02:51:09.796Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;平时要用一些命令老是去网上找还挺麻烦的，所以总结起来，方便以后自己的查阅&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://xianyulaodi.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用vue2+vue-router+vuex写一个cnode的脚手架</title>
    <link href="https://xianyulaodi.github.io/2017/03/29/%E4%BD%BF%E7%94%A8vue2+vue-router+vuex%E5%86%99%E4%B8%80%E4%B8%AAcnode%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <id>https://xianyulaodi.github.io/2017/03/29/使用vue2+vue-router+vuex写一个cnode的脚手架/</id>
    <published>2017-03-29T12:46:00.000Z</published>
    <updated>2017-04-09T15:49:54.004Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;公司后面的H5项目打算用vue2来做，之前有用过一小会vue，但没有真正的去了解，之前框架来说用react用的比较多点。所以趁这个阶段，用cnode中文网提供的api来做了个入门的脚手架，如果脚手架搭好并理解了，那么后面的运用就轻松多了。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="https://xianyulaodi.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://xianyulaodi.github.io/tags/vue/"/>
    
      <category term="vuex" scheme="https://xianyulaodi.github.io/tags/vuex/"/>
    
      <category term="vue-router" scheme="https://xianyulaodi.github.io/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>老生常谈-从输入url到页面展示到底发生了什么</title>
    <link href="https://xianyulaodi.github.io/2017/03/22/%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88-%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>https://xianyulaodi.github.io/2017/03/22/老生常谈-从输入url到页面展示到底发生了什么/</id>
    <published>2017-03-22T12:07:00.000Z</published>
    <updated>2017-04-09T15:49:54.006Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp; 刚开始写这篇文章还是挺纠结的，因为网上搜索“从输入url到页面展示到底发生了什么”，你可以搜到一大堆的资料。而且面试这道题基本是必考题，二月份面试的时候，虽然知道这个过程发生了什么，不过当面试官一步步追问下去的，很多细节就不太清楚了。&lt;br&gt; &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;最近刚好也在看http协议相关的东西，所以想对这个话题来个深入的总结，本文的目的是通过输入url之后发生的事情来做知识的总结和扩展。所以文章可能会很杂。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="博客园迁移" scheme="https://xianyulaodi.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>cookie小结</title>
    <link href="https://xianyulaodi.github.io/2017/03/12/cookie%E5%B0%8F%E7%BB%93/"/>
    <id>https://xianyulaodi.github.io/2017/03/12/cookie小结/</id>
    <published>2017-03-12T04:18:00.000Z</published>
    <updated>2017-04-09T15:49:54.001Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;　　前记：前段时间搞一个活动，开发的时间被严重压缩，忙到飞起，以致于都没怎么写文章了，内疚.&lt;br&gt;　　2月份参加了一场面试，有一些关于cookie的问题回答的不是很好，所以这篇文章我们来对cooKie做一个探讨和总结，查漏补缺。其实本文很早之前都写的差不多了，不过关于cookie跨域方面，查了比较多的资料，始终没有一个太好的结果，所以本文一直没有发布。&lt;br&gt;　　本文的很多内容都是参考网上的资料，可以说是好几篇资料的集合，毕竟是总结嘛，就是将自己觉得有用的东西集合在一起。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="博客园迁移" scheme="https://xianyulaodi.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E8%BF%81%E7%A7%BB/"/>
    
      <category term="cookie" scheme="https://xianyulaodi.github.io/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>以setTimeout来聊聊Event Loop</title>
    <link href="https://xianyulaodi.github.io/2017/02/26/%E4%BB%A5setTimeout%E6%9D%A5%E8%81%8A%E8%81%8AEvent%20Loop/"/>
    <id>https://xianyulaodi.github.io/2017/02/26/以setTimeout来聊聊Event Loop/</id>
    <published>2017-02-26T05:35:00.000Z</published>
    <updated>2017-04-18T15:40:01.624Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;平时的工作中，也许你会经常用到setTimeout这个方法，可是你真的了解setTimeout吗？本文想通过总结setTimeout的用法，顺便来探索javascript里面的事件执行机制。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="博客园迁移" scheme="https://xianyulaodi.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E8%BF%81%E7%A7%BB/"/>
    
      <category term="setTimeout" scheme="https://xianyulaodi.github.io/tags/setTimeout/"/>
    
      <category term="Eventloop" scheme="https://xianyulaodi.github.io/tags/Eventloop/"/>
    
  </entry>
  
</feed>
